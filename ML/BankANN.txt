4. Give a bank customer build a neural network based classifies than the determine whether they will leave or not in next 6 months.

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn import metrics
df=pd.read_csv("Churn_Modelling.csv")
df.head()

df.shape

df.columns

# input data
x=df[['CreditScore','Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard','IsActiveMember']]
# output data
y=df[ 'Exited']

sns.countplot(x=y);

y.value_counts()

# Normalise
from sklearn.preprocessing import StandardScaler

Scaler =StandardScaler()

x_scaled=Scaler.fit_transform(x)

x_scaled

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, random_state=0, test_size=0.2)

x.shape

x_train.shape

x_test.shape

from sklearn.neural_network import MLPClassifier

ann = MLPClassifier(hidden_layer_sizes=(100, 100, 100), random_state=0, max_iter=100)

ann.fit(x_train,y_train)

y_pred = ann.predict(x_test)

from sklearn.metrics import ConfusionMatrixDisplay, classification_report, accuracy_score

y_test.value_counts()

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))

!pip install imbalanced-learn

from imblearn.over_sampling import RandomOverSampler

ros = RandomOverSampler (random_state =0)

x_res,y_res = ros.fit_resample(x,y)

y_res.value_counts()

# Normalise
from sklearn.preprocessing import StandardScaler

Scaler =StandardScaler()

x_scaled=Scaler.fit_transform(x_res)

x_scaled

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x_scaled, y_res, random_state=0, test_size=0.2)

x_res.shape

from sklearn.neural_network import MLPClassifier

ann = MLPClassifier(hidden_layer_sizes=(100, 100, 100), random_state=0, max_iter=100)

ann.fit(x_train,y_train)

y_pred = ann.predict(x_test)

from sklearn.metrics import ConfusionMatrixDisplay, classification_report, accuracy_score

y_test.value_counts()

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))